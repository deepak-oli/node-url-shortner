services:
  postgres:
    image: postgres:15
    restart: always
    user: postgres
    env_file:
      - .env # Load environment variables
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $DB_USER -d $DB_NAME" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432" # Standard PostgreSQL port
    volumes:
      - pgdata:/var/lib/postgresql/data

  redis:
    image: redis:7
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD} # Set Redis password
    env_file:
      - .env # Load environment variables
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT}:6379" # Standard Redis port
    volumes:
      - redis_data:/data # Persistent Redis data storage
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build: .
    container_name: app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy # Ensures app starts only when DB is ready
      redis:
        condition: service_healthy # Ensures app starts only when Redis is ready
    env_file:
      - .env
    ports:
      - "${PORT}:8000" # Dynamic port mapping
      - "9229:9229" # Debugging port
    volumes:
      - .:/app
      - /app/node_modules # Prevents overwriting container dependencies
    # command: [ "pnpm", "dev" ]
    command: [ "pnpm", "debug" ]

volumes:
  pgdata:
    name: pgdata # Ensures persistent PostgreSQL data storage
  redis_data:
    name: redis_data # Ensures persistent Redis data storage
