// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String    // Hashed password
  name          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  urls          Url[]
  
  @@map("users")
}

model Url {
  id          String    @id @default(uuid())
  originalUrl String    @db.Text
  shortCode   String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  expiresAt   DateTime?
  clicks      Int       @default(0)
  isActive    Boolean   @default(true)
  
  // Relations
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])
  visits      Visit[]
  
  @@index([shortCode])
  @@map("urls")
}

model Visit {
  id          String    @id @default(uuid())
  urlId       String
  url         Url       @relation(fields: [urlId], references: [id])
  visitedAt   DateTime  @default(now())
  ipAddress   String?
  userAgent   String?   @db.Text
  referrer    String?   @db.Text
  
  @@map("visits")
}

model Analytics {
  id            String    @id @default(uuid())
  totalClicks   Int       @default(0)
  uniqueVisits  Int       @default(0)
  date          DateTime  @default(now()) @db.Date
  
  @@unique([date])
  @@map("analytics")
}
